<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jackchen Notebook</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jackchensky.github.io/"/>
  <updated>2021-10-03T08:44:36.961Z</updated>
  <id>https://jackchensky.github.io/</id>
  
  <author>
    <name>Jackchen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Docker上运行一个Wordpress网站</title>
    <link href="https://jackchensky.github.io/2019/09/03/2019-8-Docker%20bulid%20wordpress/"/>
    <id>https://jackchensky.github.io/2019/09/03/2019-8-Docker bulid wordpress/</id>
    <published>2019-09-02T18:06:39.000Z</published>
    <updated>2021-10-03T08:44:36.961Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.jackchen.cn/virtual_reality_travel-wallpaper-1920x1080.jpg" alt="在Docker上运行wordpress"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>一直对Docker很感兴趣，很想用Docker来配置一个网站来体验一下它的高效和便捷。用 Docker Compose 配置好网站需要的服务，这样不管到哪都可以一键启动网站，不需要重复配置网站环境，可以让很多对服务器运维不了解的人快速的架构一个网站。最近实在太忙，这篇文章断断续续写了一个月，在配置的过程遇到过很多问题，大部分都通过Google一一化解。现在把整个过程整理了出来，希望需要的童鞋看了可以少走弯路:) ，下面就给大家说说如何配置架构网站吧~ 👏</p></blockquote><h2 id="1-安装配置桌面版Docker"><a href="#1-安装配置桌面版Docker" class="headerlink" title="1.安装配置桌面版Docker"></a>1.安装配置桌面版Docker</h2><p>首先需要登录Docker官方网站去下载桌面版本，Docker有MAC版本和Win版本，我这里下载的是MAC版本。PS:下载之前你需要先去申请一个<code>docker hub账号</code>然后登录一下，之后才可以看到下载按钮。如果你要下载MAC版本的可以<a href="https://hub.docker.com/editions/community/docker-ce-desktop-mac" target="_blank" rel="noopener"><code>点击这里下载</code></a>。<br><a id="more"></a><br>下载完成后直接打开文件，然后在打开的界面里把<code>Docker</code>拖到<code>Applications</code>(就是你的应用程序目录)中。然后你就可以在你的启动台中找到<code>Docker desktop</code>。第一次打开会提示应用需要一些管理权限，点击OK输入你系统的密码。这样你会发现你电脑的右上角会出现一个Docker小图标，点开它会有一个下拉菜单，然后找到<code>Sign in/Create Docker ID</code>去登录一下（账号密码就是你之前在官网上申请好了的），登录成功后你能在下拉菜单中看到你的用户名。然后在下拉菜单中点开<code>Preferences偏好设置</code>，在弹出的窗口中选择<code>Daemon图标</code>来配置添加一下镜像加速地址，这样在国内下载镜像也会很快。</p><p>添加的地址可以在你的阿里云账号里找到——登录你的阿里云账号，在左上角控制台下面打开产品与服务，然后在右侧划出的界面搜索里搜索关键字<code>容器</code>，你会在下面看到<code>容易镜像服务</code>，点击后可以看到侧边菜单栏里有一个<code>容器加速器</code>，点击后<code>复制加速器的地址</code>，然后回到<code>Docker desktop</code>的<code>Daemon</code>界面，把地址粘贴在<code>Registry mirrors</code>下面，然后点击下面<code>Apply &amp; Restart</code>来应用并重启下。之后<code>Docker desktop</code>就会应用我们做的配置。</p><h2 id="2-配置需要的服务"><a href="#2-配置需要的服务" class="headerlink" title="2.配置需要的服务"></a>2.配置需要的服务</h2><p>用Docker Compose来配置运行WordPress网站需要的服务，我们需要把这些配置需求写在一个yml后缀的文件里。先在你电脑里新建一个存放网站的目录——比如说桌面上。在终端里输入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/desktop     #在终端定位到桌面目录下</span><br><span class="line">mkdir design-web #新建一个网站文件夹design-web</span><br><span class="line">cd design-web    #进入新建的这个目录</span><br><span class="line">atom ./          #如果你电脑里有转Atom编辑器，可以直接在编辑器里打开这个目录</span><br></pre></td></tr></table></figure></p><p>然后在这个目录下创建一个<code>docker-compose.yml</code>文件，然后我们可以在这个目录下面去配置WordPress网站需要的环境。输入如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3&apos;</span><br><span class="line">services:</span><br><span class="line">  wordpress:</span><br><span class="line">    image: wordpress:5.0.2</span><br><span class="line">    restart: always</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8008:80&quot;</span><br><span class="line">    environment:</span><br><span class="line">      WORDPRESS_DB_HOST: db:3306</span><br><span class="line">      WORDPRESS_DB_USER: &apos;designweb&apos;</span><br><span class="line">      WORDPRESS_DB_PASSWORD: &apos;password&apos;</span><br><span class="line">      WORDPRESS_DB_NAME: &apos;designweb&apos;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./app/wp-content:/var/www/html/wp-content/</span><br><span class="line">      - ./app/config/php-uploads.ini:/usr/local/etc/php/conf.d/uploads.ini</span><br><span class="line">  db:</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_DATABASE: &apos;designweb&apos;</span><br><span class="line">      MYSQL_USER: &apos;designweb&apos;</span><br><span class="line">      MYSQL_PASSWORD: &apos;password&apos;</span><br><span class="line">      MYSQL_ROOT_PASSWORD: &apos;password&apos;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./app/db:/var/lib/mysql</span><br><span class="line">  phpmyadmin:</span><br><span class="line">    image: phpmyadmin/phpmyadmin</span><br><span class="line">    restart: always</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8800:80&quot;</span><br><span class="line">    environment:</span><br><span class="line">      PMA_HOST: db</span><br><span class="line">      MYSQL_ROOT_PASSWORD: &apos;password&apos;</span><br></pre></td></tr></table></figure><p>好了，这样我们就在<code>Docker compose</code>里定义了所有我们需要的服务。</p><h2 id="3-运行配置的服务"><a href="#3-运行配置的服务" class="headerlink" title="3.运行配置的服务"></a>3.运行配置的服务</h2><p>首先我们要确定一下<code>Docker desktop</code>已经在你的系统中运行了，然后我们只需要打开终端，再到项目的目录里（就是<code>Docker-compose.yml</code>这个文件的目录下）执行下面命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></p><p>这样，你就启动了在<code>Docker compose</code>里定义的这些服务。如果你是第一次运行，Docker会先下载服务需要的镜像，比如WordPress镜像和MySQL镜像，以及PHPMYadmin镜像，然后基于镜像去创建需要的容器。下载这些镜像的时候可能需要等待一段时间，如果你之前已经有这些镜像，那下一次在执行<code>docker-compose up</code>命令的时候就不会等待了，会非常的快（因为docker只需要去创建容器，不需要再去下载镜像了）。最后你会看到运行完后会出现——<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Creating designweb_db_1 ... done</span><br><span class="line">Creating designweb_wordpress_1 ... done</span><br><span class="line">Creating designweb_phpmyadmin_1 ... done</span><br></pre></td></tr></table></figure></p><p>然后在终端中执行一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure></p><p>来看一下系统中正在运行的容器，这里你会看见3个正在运行的容器，然后打开你电脑里的游览器，输入<code>localhost:8008</code>。因为在定义wordpress服务的时候我们设置了主机上面的8008端口映射了容器里面的80端口，所以访问的时候打开的就是<code>wordpress服务</code>（如果打不开可以稍等一下，然后再刷新一下页面就可以打开了）。如果打开的页面有问题可能是你设置的端口被占用了，可以换一个端口试试。如果还是不行可能是你的配置有问题可以<a href="https://docs.docker.com/compose/wordpress/#shutdown-and-cleanup" target="_blank" rel="noopener">点击这里查看一下Docker官方的WordPress配置文档</a>。</p><p>一切OK后，你可以看到游览器打开了wordpress的安装界面，然后在网页里的语言中，选择<code>简体中文</code>，然后点击<code>继续</code>。填写你网站的标题名城，后台管理员的用户名、密码和电子邮箱，然后点击<code>安装WordPress</code>。在跳出的安装成功的网页中点击<code>登录</code>按钮，输入你刚刚设置的用户名和密码，点击<code>登录</code>按钮。这样你就成功的登录了WordPress网站的管理后台。</p><p>这样你就成功在本地电脑中创建了一个WordPress网站 😄</p><h2 id="4-WordPress网站的源代码管理"><a href="#4-WordPress网站的源代码管理" class="headerlink" title="4.WordPress网站的源代码管理"></a>4.WordPress网站的源代码管理</h2><p>现在我们要给这个网站添加一个代码仓库。首先我们要看一下我们项目目录，你会看见项目文件夹中有一个<code>app</code>目录，<code>app</code>目录下面有一个<code>db</code>目录。这个db目录就是我们项目中数据库相关的文件，正常我们不会将这个目录放在源代码管理中。还有一个<code>wp-content</code>目录，这个目录放的是WordPress网站的一些资源，如果你上传过文件，你会发现<code>wp-content</code>目录下会多了一个<code>uploads</code>目录。这个目录就是我们平时上传网站上的文件存放的目录。这个文件也不需要放在代码管理中。所以我们现在要在配置里说明一下。</p><p>在你的项目目录下，比如我这里的<code>designweb</code>目录下创建一个<code>.gitignore</code>文件来写清楚不需要源代码管理的文件，比如下面这样——<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">app/db/</span><br><span class="line">app/wp-content/uploads/</span><br></pre></td></tr></table></figure></p><p>然后打开终端，在项目的根目录下做git版本控制<br>首先初始化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></p><p>然后在终端中添加所有的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></p><p>然后保存到仓库的历史记录中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &apos;init&apos;</span><br></pre></td></tr></table></figure></p><p>然后你在终端中输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure></p><p>会看到一条我们刚刚提交的记录。</p><h2 id="5-创建项目的阿里云远程仓库"><a href="#5-创建项目的阿里云远程仓库" class="headerlink" title="5.创建项目的阿里云远程仓库"></a>5.创建项目的阿里云远程仓库</h2><p>远程仓库我们用的是阿里云，首先打开游览器输入<a href="https://code.aliyun.com" target="_blank" rel="noopener">https://code.aliyun.com</a> ，登陆你的阿里云账号。然后点击<code>新项目</code>来创建一个新的私有项目。这个项目的项目路径是<code>code.aliyun.com+你的用户名+项目名</code>（比如design-web），然后下面<code>可见的等级</code>选择<code>Private</code>表式私有项目，确认后点击下面的<code>创建项目</code>。</p><p>然后复制<code>SSH</code>类型的仓库地址，再回到你电脑的终端来添加这个远程地址。你项目的目录下输入<code>git remote add origin+刚刚复制的SSH地址</code>，比如下面这样——<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@code.aliyun.com:jackchensky/design-web.git</span><br></pre></td></tr></table></figure></p><p>在把我们项目推送到刚添加的origin阿里云的远程仓库中，输入——<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p><p>如果你的电脑之前没有配置SSK可能会提示没有推送的权限，不急我们可以配置一下SSHK来验证下权限。执行一下——<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p><p>这样就输出了现在用户目录下面的这个.ssh里面的公钥内容</p><p>如果你没有这个文件，可以创建一个——<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen去创建一个秘钥</span><br></pre></td></tr></table></figure></p><p>然后复制一下上面公钥的内容，回到刚刚阿里云的远程仓库，会看到网页上方有一个提示栏，点击<code>增加SSH秘钥</code>，打开的就是一个增加公钥的界面，然后粘贴进去，然后在下面设置一个标题，比如<code>MAC</code>，再点击下面<code>增加秘钥</code>按钮。就要就OK啦！</p><p>如果增加后，上面显示<code>Fingerprint has already been taken</code>，那说明你的这个公钥在其他阿里云账号里已经使用过啦，这个时候你需要用另一个方式来验证一下。点击左侧菜单<code>首页</code>，点击我们刚刚创建的这个项目，在左侧菜单里点击<code>成员</code>，添加你之前在其他阿里云中使用过的<code>用户</code>，在<code>角色</code>选择一个角色，比如选择<code>Master</code>，然后点击<code>增加用户到项目</code>，这样就OK啦！</p><p>然后我们再回到终端，再次输入——<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p><p>你会发现项目成功的开始推送到远程了☝️。然后点击<code>code.aliyun.com</code>左侧的<code>项目</code>再点击下面的<code>文件</code>菜单，就可以看到刚刚推送上来的master分支包含的文件啦 😊。</p><p>当然作为一个☝️优秀的程序员👩‍💻(码农)，记得要在后面添加个注释，要有这个良好的习惯，防止以后忘记了~</p><h2 id="6-准备好域名"><a href="#6-准备好域名" class="headerlink" title="6.准备好域名"></a>6.准备好域名</h2><p>现在需要将整个网站克隆到你的服务器上，所以你要提前做好添加DNS记录让网站的域名指向服务器。如果你的域名是在阿里云购买的，还可以顺便为域名申请一个免费的SSL证书。对你网站以后的扩展有帮助哦~ 比如说你要把你的网站内容做成一个微信小程序！！</p><h2 id="7-克隆项目仓库到阿里云服务器"><a href="#7-克隆项目仓库到阿里云服务器" class="headerlink" title="7.克隆项目仓库到阿里云服务器"></a>7.克隆项目仓库到阿里云服务器</h2><p>因为我的服务器是在阿里云上，所以就以阿里云服务器来做流程说明，其他平台大家可以参考，应该大同小异。首先我用的是阿里云的ECS服务器，操作系统是CentOS7。用终端工具连接后可以先对服务器做一些小配置。</p><h3 id="7-1-安装epel-release，一个软件仓库，在终端输入如下代码-如果你当前用的不是root，需要在下面的命令前面加上sudo-来获取管理员权限"><a href="#7-1-安装epel-release，一个软件仓库，在终端输入如下代码-如果你当前用的不是root，需要在下面的命令前面加上sudo-来获取管理员权限" class="headerlink" title="7.1 安装epel-release，一个软件仓库，在终端输入如下代码(如果你当前用的不是root，需要在下面的命令前面加上sudo 来获取管理员权限)"></a>7.1 安装epel-release，一个软件仓库，在终端输入如下代码(如果你当前用的不是root，需要在下面的命令前面加上<code>sudo</code> 来获取管理员权限)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release -y</span><br></pre></td></tr></table></figure><p>现在用yum安装的东西会多很多！</p><h3 id="7-2-安装一个社区的软件仓库，在终端输入如下代码"><a href="#7-2-安装一个社区的软件仓库，在终端输入如下代码" class="headerlink" title="7.2 安装一个社区的软件仓库，在终端输入如下代码"></a>7.2 安装一个社区的软件仓库，在终端输入如下代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install https://centos7.iuscommunity.org/ius-release.rpm</span><br></pre></td></tr></table></figure><h3 id="7-3-安装Git工具，在终端输入如下代码"><a href="#7-3-安装Git工具，在终端输入如下代码" class="headerlink" title="7.3 安装Git工具，在终端输入如下代码"></a>7.3 安装Git工具，在终端输入如下代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git2u -y</span><br></pre></td></tr></table></figure><p>上面代码最后的<code>-y</code>是表示确认安装。</p><h3 id="7-4-在安装下nginx，在终端输入如下代码"><a href="#7-4-在安装下nginx，在终端输入如下代码" class="headerlink" title="7.4 在安装下nginx，在终端输入如下代码"></a>7.4 在安装下nginx，在终端输入如下代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx -y</span><br></pre></td></tr></table></figure><h3 id="7-5-从远程项目地址clone到你的服务器"><a href="#7-5-从远程项目地址clone到你的服务器" class="headerlink" title="7.5 从远程项目地址clone到你的服务器"></a>7.5 从远程项目地址clone到你的服务器</h3><p>进入你的服务器，到<code>mnt</code>目录下，新建一个<code>app</code>的目录，可以把网站项目放在这个目录下面。现在就可以把之前远程仓库里的项目克隆到服务器新建的<code>app</code>目录下了。打开 <a href="https://code.aliyun.com" target="_blank" rel="noopener">https://code.aliyun.com</a> ，登录后点击左侧的项目，然后在右边找到SSH类型的仓库地址，复制一下。然后回到终端，在新建的<code>app</code>目录下输入如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone + 刚刚复制的地址</span><br></pre></td></tr></table></figure><p>回车执行一下，如果有询问是否连接之类的，输入 <code>yes</code>，如果显示 <code>Permission denied (publickey)</code> 可能是因为项目是私有的项目，需要有权限才可以克隆。没关系，按照下面的步骤来给远程仓库添加个服务器上的权限Key就可以了。</p><p>首先在终端 <code>app</code>目录下输入 <code>ls -la ~/.ssh</code> 来查看当前主目录下.ssh里面的文件，找到<code>id_rsa.pub</code>，终端中输入 <code>cat ~/.ssh/id_rsa.pub</code>，然后回车，复制下里面的内容，回到 code.aliyun.com 点击左边的首页&gt;设置&gt;SSH公钥，然后在右边点击 <code>增加 SSH 秘钥</code> ，然后将刚刚复制的内容粘贴到公钥后面的空格里，在下面标题后面输入一个标题，比如 aliyun，再点击下面的增加秘钥就完成了。</p><p>再回到终端，再执行一下之前的克隆命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone + 远程复制过来的SSH地址</span><br></pre></td></tr></table></figure><p>回车后就可以看到项目被成功的克隆到你服务器里了。</p><h2 id="8-在阿里云CentOS服务器上安装Docker"><a href="#8-在阿里云CentOS服务器上安装Docker" class="headerlink" title="8.在阿里云CentOS服务器上安装Docker"></a>8.在阿里云CentOS服务器上安装Docker</h2><h3 id="8-1-先安装两个依赖的软件"><a href="#8-1-先安装两个依赖的软件" class="headerlink" title="8.1 先安装两个依赖的软件"></a>8.1 先安装两个依赖的软件</h3><p>在终端中连接到你的阿里云服务器，然后输入如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install yum-utils device-mapper-persistent-data lvm2 -y</span><br></pre></td></tr></table></figure><p>然后再执行一下下面的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></p><h3 id="8-2-安装Docker"><a href="#8-2-安装Docker" class="headerlink" title="8.2 安装Docker"></a>8.2 安装Docker</h3><p>继续在终端中输入如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce -y</span><br></pre></td></tr></table></figure><p>回车后就会开始安装，安装完成后输入下面代码来启动看看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure></p><p>然后可以继续查看一下docker的状态，输入下面代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure></p><p>你可以在跳出的状态文字中看到 <code>active(running)</code>表示正在运行中…</p><h3 id="8-3-安装-Docker-Compose"><a href="#8-3-安装-Docker-Compose" class="headerlink" title="8.3 安装 Docker Compose"></a>8.3 安装 Docker Compose</h3><p>在终端中连接服务器后继续输入如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-compose -y</span><br></pre></td></tr></table></figure><p>这种安装方法是从yum仓库里安装的，版本可能会比较低一些，如果你想安装新的版本，可以去Docker Compose在github上的远程仓库，<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">https://github.com/docker/compose/releases</a>，这个页面里有最新版本的Docker Compose，复制页面里的安装方法，代码如下，粘贴到你的终端中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.25.0-rc1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>执行后再复制页面里的执行权限代码，粘贴到终端中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>回车执行一下，然后就可以使用Docker Compose啦！！</p><h2 id="9-运行Docker-Compose项目"><a href="#9-运行Docker-Compose项目" class="headerlink" title="9.运行Docker Compose项目"></a>9.运行Docker Compose项目</h2><h3 id="9-1-运行项目"><a href="#9-1-运行项目" class="headerlink" title="9.1 运行项目"></a>9.1 运行项目</h3><p>经过上面的一些步骤，终于可以在服务器上用Docker Compose来运行项目啦 😺<br>首先，打开终端连接到服务器，找到项目的位置，比如我的项目位置为 <code>cd /mnt/app/designweb</code>，在项目<code>designweb</code>目录下可以看到<code>app</code>文件夹目录和<code>docker-compose.yml</code>配置文件。执行一下这个配置文件，代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>这样就可以创建和运行在配置文件里定义的服务，第一次运行需要去下载服务需要的镜像，所以需要一些时间。有了镜像后再创建容器就会很快了。创建好了之后执行一下 <code>docker ps</code> 会看到正在运行的服务。</p><h3 id="9-2-创建-Nginx代理"><a href="#9-2-创建-Nginx代理" class="headerlink" title="9.2 创建 Nginx代理"></a>9.2 创建 Nginx代理</h3><p>找到你服务器上Nginx配置文件所在的目录，一般目录在这个位置 <code>/etc/nginx/conf.d</code>，在这个目录下创建一个配置文件，在终端中输入如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi designweb.cn.conf  // 创建的文件名可以用你的域名+.conf</span><br></pre></td></tr></table></figure><p>回车后进入新建的.conf文件，然后按键盘上的字母 <code>i</code> 进入编辑模式，然后输入下面的配置代码，注意域名修改成你自己的，还有如果你域名有申请SSL证书，需要把证书放对目录位置并在下面配置文件里指向到对应的目录位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">upstream designweb &#123;</span><br><span class="line">  server 127.0.0.1:8000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen        80;</span><br><span class="line">  server_name   www.designweb.cn designweb.cn;</span><br><span class="line">  return 301    https://$host$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen       443 ssl http2;</span><br><span class="line">  server_name  designweb.cn;</span><br><span class="line">  ssl          on;</span><br><span class="line">  index        index.html;</span><br><span class="line"></span><br><span class="line">  ssl_certificate           /etc/nginx/ssl/designweb.cn/designweb-ca-bundle.crt;</span><br><span class="line">  ssl_certificate_key       /etc/nginx/ssl/designweb.cn/designweb.key;</span><br><span class="line">  ssl_session_timeout       5m;</span><br><span class="line">  ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">  ssl_ciphers               AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;</span><br><span class="line">  ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_set_header  X-Forwarded-Host $host;</span><br><span class="line">    proxy_set_header  X-Forwarded-Proto $scheme;</span><br><span class="line">    proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class="line">    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header  Host $http_host;</span><br><span class="line">    proxy_redirect    off;</span><br><span class="line">    expires           off;</span><br><span class="line">    sendfile          off;</span><br><span class="line">    proxy_pass        http://designweb;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑完成后，按一下键盘左上角的 <code>esc</code>，然后在输入 <code>:wq</code> 回车来保存退出编辑模式！然后在终端里执行一下 <code>nginx -t</code> 来测试一下配置有没有问题！如果显示 <code>test is successful</code>就没问题啦~ 现在再重启一下Nginx服务器，输入 <code>systemctl reload nginx</code>。👌现在打开你电脑的游览器，访问你绑定在服务器上的域名，然后页面会跳转到一个wordpress的安装页面，然后在安装页面输入你网站的名字、管理员的用户名、管理员密码和一个邮箱地址，输入完成后点击下面的 Install Wordpress来安装WordPress网站，安装完成后，输入你刚刚设置的用户名和密码就可以登录网站的管理后台啦！！现在你就可以在后台设置里对网站做一些修改和配置，并开始发布你的文章啦！</p><h3 id="9-3-修改WordPress上传文件大小限制"><a href="#9-3-修改WordPress上传文件大小限制" class="headerlink" title="9.3 修改WordPress上传文件大小限制"></a>9.3 修改WordPress上传文件大小限制</h3><p>WordPress后台默认上传的文件大小为2M，如果要修改这个限制，需要在配置文件里说明一下，大家可以看到上面我的docker-compose.yml的配置文件中有一行这个代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- ./app/config/php-uploads.ini:/usr/local/etc/php/conf.d/uploads.ini</span><br></pre></td></tr></table></figure><p>这个就是为了修改上传文件大小的，但是上面我没有创建 <code>php-uploads.ini</code> 这个配置文件，在你项目目录下的<code>app</code>目录里新建一个 <code>config</code>目录，在这个目录里新建一个 <code>php-uploads.ini</code>配置文件，在这个文件里添加一些和文件上传相关的配置，代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file_upload = On</span><br><span class="line">upload_max_filesize = 200M</span><br><span class="line">post_max_size = 200M</span><br><span class="line">max_execution_time = 600</span><br></pre></td></tr></table></figure><p>这样你的WordPress上传文件大小的限制就修改成了200M。</p><h3 id="9-4-Docker在服务器上频繁重启"><a href="#9-4-Docker在服务器上频繁重启" class="headerlink" title="9.4 Docker在服务器上频繁重启"></a>9.4 Docker在服务器上频繁重启</h3><p>网站配置完成后很开心，但是发现网站很不稳定，查看服务器发现Docker在频繁的重启。在查阅了很多资料后还不是很确定具体是哪种可能，最后问了做技术的朋友，知道是服务器内存小了，我初始服务器配置的内存是512M，所以在阿里云上把服务器内存升级到1G后问题完美解决 👏</p><h2 id="10-总结"><a href="#10-总结" class="headerlink" title="10.总结"></a>10.总结</h2><p>现在你就可以用Docker来运行一个WordPress网站啦！还是很不错的 :D</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.jackchen.cn/virtual_reality_travel-wallpaper-1920x1080.jpg&quot; alt=&quot;在Docker上运行wordpress&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一直对Docker很感兴趣，很想用Docker来配置一个网站来体验一下它的高效和便捷。用 Docker Compose 配置好网站需要的服务，这样不管到哪都可以一键启动网站，不需要重复配置网站环境，可以让很多对服务器运维不了解的人快速的架构一个网站。最近实在太忙，这篇文章断断续续写了一个月，在配置的过程遇到过很多问题，大部分都通过Google一一化解。现在把整个过程整理了出来，希望需要的童鞋看了可以少走弯路:) ，下面就给大家说说如何配置架构网站吧~ 👏&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-安装配置桌面版Docker&quot;&gt;&lt;a href=&quot;#1-安装配置桌面版Docker&quot; class=&quot;headerlink&quot; title=&quot;1.安装配置桌面版Docker&quot;&gt;&lt;/a&gt;1.安装配置桌面版Docker&lt;/h2&gt;&lt;p&gt;首先需要登录Docker官方网站去下载桌面版本，Docker有MAC版本和Win版本，我这里下载的是MAC版本。PS:下载之前你需要先去申请一个&lt;code&gt;docker hub账号&lt;/code&gt;然后登录一下，之后才可以看到下载按钮。如果你要下载MAC版本的可以&lt;a href=&quot;https://hub.docker.com/editions/community/docker-ce-desktop-mac&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;点击这里下载&lt;/code&gt;&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="wordpress" scheme="https://jackchensky.github.io/categories/wordpress/"/>
    
    
      <category term="wordpress" scheme="https://jackchensky.github.io/tags/wordpress/"/>
    
      <category term="Docker" scheme="https://jackchensky.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>关于Wordpress数据库连接时出错的解决方法</title>
    <link href="https://jackchensky.github.io/2019/08/26/2019-8-wp-data-connection-error/"/>
    <id>https://jackchensky.github.io/2019/08/26/2019-8-wp-data-connection-error/</id>
    <published>2019-08-25T17:06:39.000Z</published>
    <updated>2021-10-03T07:50:35.082Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.jackchen.cn/bridge-wallpaper-1600x900.jpg" alt="wordpress 数据库连接出错"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Blog网站搬迁到新的服务器上一直还可以，上个月有一天突然网站打开跳出个“建立数据库连接错误”几个大字…一脸懵逼的我，脑子突然闪过——网站数据库被黑了！！！5秒后我发现这个可能性几乎为零，毕竟没哪个黑客无聊到去黑一个个人小博客😁，篡改数据库配置文件什么的！自作多情之后一起来分析下其他的可能性…</p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>遇到问题最好的办法当然是Google，经过一番搜索，有关WordPress建立数据库连接时出错的原因有很多：</p><blockquote><ul><li>数据库配置文件被篡改。（这种几率很小刚也说过了，除非被黑客入侵篡改过）；</li><li>数据库服务器的问题，服务未启动或者其他的一些数据库故障；</li><li>最重要的一个原因，wp_options表需要修复。</li></ul></blockquote><a id="more"></a><p>发现最有可能的还是wp_options这个数据库的表有问题，需要修复。很多童鞋也有反应，不知道为什么wordpress运行一段时间后就会出现这样的问题。由于我网站是搬迁到了新的服务器，当时搬迁的原因主要是之前的服务器里的阿里云OS版本太低了，不想折腾，直接去开了台新的阿里云服务器，之前的就不用了。然后随便把WordPress版本升级为最新的版本，也可能新版本和老版本还是有一些兼容性的问题。嗯，那么如果wp-options这个表的问题最大，那么要如何修复呢！</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>使用phpmyadmin到后台去直接修复这个表，进入phpmyadmin后直接找到这个表，然后在前面勾选，在操作里选择<code>修复表</code>；</p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>也可以在wp-config.php中增加一句代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define(‘WP_ALLOW_REPAIR’, true);</span><br></pre></td></tr></table></figure></p><p>然后直接访问后台 <code>http://www.youdomain.com/wp-admin/</code>，再按照wordpress的修复步骤操作即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当然，为了你的网站安全，你完全可以先把数据库的密码修改成新的，防止真的有无聊的黑客逗你玩 😆 …</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.jackchen.cn/bridge-wallpaper-1600x900.jpg&quot; alt=&quot;wordpress 数据库连接出错&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Blog网站搬迁到新的服务器上一直还可以，上个月有一天突然网站打开跳出个“建立数据库连接错误”几个大字…一脸懵逼的我，脑子突然闪过——网站数据库被黑了！！！5秒后我发现这个可能性几乎为零，毕竟没哪个黑客无聊到去黑一个个人小博客😁，篡改数据库配置文件什么的！自作多情之后一起来分析下其他的可能性…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h2&gt;&lt;p&gt;遇到问题最好的办法当然是Google，经过一番搜索，有关WordPress建立数据库连接时出错的原因有很多：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;数据库配置文件被篡改。（这种几率很小刚也说过了，除非被黑客入侵篡改过）；&lt;/li&gt;
&lt;li&gt;数据库服务器的问题，服务未启动或者其他的一些数据库故障；&lt;/li&gt;
&lt;li&gt;最重要的一个原因，wp_options表需要修复。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="wordpress" scheme="https://jackchensky.github.io/categories/wordpress/"/>
    
    
      <category term="wordpress" scheme="https://jackchensky.github.io/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>一句代码硬核恢复wordpress经典编辑器</title>
    <link href="https://jackchensky.github.io/2019/04/04/2019-4-restore-wp-classic-editor/"/>
    <id>https://jackchensky.github.io/2019/04/04/2019-4-restore-wp-classic-editor/</id>
    <published>2019-04-03T16:06:39.000Z</published>
    <updated>2021-10-03T07:50:35.081Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.jackchen.cn/pic-8.jpg" alt="修复wordpress IP验证不当"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>新的网站架设起来发现一个新的问题☝️，文章的编辑器和以前的完全不一样了。查了下才知道，wordpress5.0之后的版本默认的编辑器换成了全新的Gutenberg(古腾堡)区块编辑器。嗯，听起来挺酷的，看起来也很不错。然并卵！用起来还是极其不顺手，而且非常不符合中国人的编辑习惯。更重要的是新编辑器是区块来编辑文章的。如果是公司的产品文章都文档准备好了，都不好整篇的复制粘贴过去。更不要说后期复制到文章的图片，直接用插件远程抓取并保存在本地啦（插件肯定暂时不兼容这个编辑器的）！！果断研究下恢复为以前经典编辑器界面。</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>网上有很多方法，最简单的就是直接下载个插件来禁掉古腾堡编辑器，But作为一个用了wordpress十几年写博客的人，可以负责任的告诉你插件装多了会让你的网站很臃肿哦！！还是用硬核代码的方法更直接有效吧~</p><blockquote><p>其实之前经典的Classic Editor编辑器代码仍然保留在最新的版本中并没有删除。</p></blockquote><a id="more"></a><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h4 id="找到要修改的文件："><a href="#找到要修改的文件：" class="headerlink" title="找到要修改的文件："></a>找到要修改的文件：</h4><p>找到你现在使用中的wordrepss主题函数模板<code>functions.php</code>，这个文件一般在<code>你网站目下/wp-content/themes/你使用主题模板/functions.php</code>。你可以在网站的后台里修改这个文件，也可以用ftp远程下载到本地后修改再复制到服务器上。我这边是直接ssh远程直接在服务器上修改的。</p><h4 id="添加禁用代码："><a href="#添加禁用代码：" class="headerlink" title="添加禁用代码："></a>添加禁用代码：</h4><p>将下面代码添加到<code>functions.php</code>中，即可切换回之前的编辑器，不需要任何插件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_filter(&apos;use_block_editor_for_post&apos;, &apos;__return_false&apos;);</span><br></pre></td></tr></table></figure></p><h4 id="禁用加载的样式代码："><a href="#禁用加载的样式代码：" class="headerlink" title="禁用加载的样式代码："></a>禁用加载的样式代码：</h4><p>禁用古腾堡区块编辑器后，前端还是会加载相关样式文件的，所以还需要附加上下面这句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remove_action( &apos;wp_enqueue_scripts&apos;, &apos;wp_common_block_scripts_and_styles&apos; );</span><br></pre></td></tr></table></figure></p><p>当然作为一个☝️优秀的程序员👩‍💻(码农)，记得要在后面添加个注释，要有这个良好的习惯，防止以后忘记了~</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我相信Gutenberg(古腾堡)区块编辑器一定有着非常强大的功能，不然大神们也不会在5.0后完全默认加载他。但是如果你习惯了经典编辑器那也没关系，据说经典编辑器会延续集成版本中，一直到2021年才会彻底移除。到时候如果你还是不喜欢Gutenberg(古腾堡)区块编辑器，也没关系的，有全套的经典编辑器的插件安静的等着你滴😆 …</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.jackchen.cn/pic-8.jpg&quot; alt=&quot;修复wordpress IP验证不当&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;新的网站架设起来发现一个新的问题☝️，文章的编辑器和以前的完全不一样了。查了下才知道，wordpress5.0之后的版本默认的编辑器换成了全新的Gutenberg(古腾堡)区块编辑器。嗯，听起来挺酷的，看起来也很不错。然并卵！用起来还是极其不顺手，而且非常不符合中国人的编辑习惯。更重要的是新编辑器是区块来编辑文章的。如果是公司的产品文章都文档准备好了，都不好整篇的复制粘贴过去。更不要说后期复制到文章的图片，直接用插件远程抓取并保存在本地啦（插件肯定暂时不兼容这个编辑器的）！！果断研究下恢复为以前经典编辑器界面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;p&gt;网上有很多方法，最简单的就是直接下载个插件来禁掉古腾堡编辑器，But作为一个用了wordpress十几年写博客的人，可以负责任的告诉你插件装多了会让你的网站很臃肿哦！！还是用硬核代码的方法更直接有效吧~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实之前经典的Classic Editor编辑器代码仍然保留在最新的版本中并没有删除。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="wordpress" scheme="https://jackchensky.github.io/categories/wordpress/"/>
    
    
      <category term="wordpress" scheme="https://jackchensky.github.io/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>修复阿里云服务器报“wordpress IP验证不当”漏洞</title>
    <link href="https://jackchensky.github.io/2019/03/24/2019-3-wordpress-IP-Bug/"/>
    <id>https://jackchensky.github.io/2019/03/24/2019-3-wordpress-IP-Bug/</id>
    <published>2019-03-24T06:00:13.000Z</published>
    <updated>2021-10-03T07:50:35.081Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.jackchen.cn/pic-5.jpg" alt="修复wordpress IP验证不当"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>嗯，真的好久没有更新了。上一篇文章居然还是2017年的，时间过的真快！最近在阿里云香港服务器上用Docker架设了一个wordpress网站。然后各种折腾好了之后发现阿里云后台总是显示一个漏洞。然后还是高危级别的~强迫症受不了老是看到那个小红标。决定盘它~</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先阿里云的后台显示的漏洞名称为<code>wordpress IP验证不当漏洞</code>，听起来是WordPress的一个版本Bug。然后点看具体的看了说明里给出的详细说明如下：</p><blockquote><p>wordpress /wp-includes/http.php文件中的wp_http_validate_url函数对输入IP验证不当，导致黑客可构造类似于012.10.10.10这样的畸形IP绕过验证，进行SSRF。</p></blockquote><a id="more"></a><h2 id="查询分析"><a href="#查询分析" class="headerlink" title="查询分析"></a>查询分析</h2><h4 id="解决办法一："><a href="#解决办法一：" class="headerlink" title="解决办法一："></a>解决办法一：</h4><p>可以升级你的阿里云后台云盾到企业版（前提是你真的非常有钱），一键自动修复（没试过，好不好用不清楚）</p><h4 id="解决办法二："><a href="#解决办法二：" class="headerlink" title="解决办法二："></a>解决办法二：</h4><p>如果你的网站后台不复杂且经常性的升级wordpress到最新版本，可以尝试升级你的wordpress到官方最新版本（不确定升级后漏洞就会消失，升级前记得要给网站备份，备份，备份！）</p><h4 id="解决办法三："><a href="#解决办法三：" class="headerlink" title="解决办法三："></a>解决办法三：</h4><p>其实很多问题遇到了之后要学会用关键字去Google找答案，嗯，没错~ 是谷歌不是某度！！某度搜出来的都是坑和广告。网上转了一圈后发现问题在<code>http.php</code>这个文件上。嗯，目标锁定就开始盘吧~</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h4 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h4><p>我是用SSH连接的服务器，如果你有ftp可以直接找到WordPress安装目录下的<code>wp-includes/http.php</code>文件，下载到本地用记事本打开后修改。如果你是用SSH连接，就在终端或者iTerm 中输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@你的服务器IP地址或域名</span><br></pre></td></tr></table></figure></p><p>然后输入密码登录</p><h4 id="修改准备"><a href="#修改准备" class="headerlink" title="修改准备"></a>修改准备</h4><p>如果你的服务器没有使用Docker容器，那直接找到<code>wp-includes/http.php</code>文件，然后vim进入修改就可以了。如果你是用Docker容器安装的。先找到放置容器配置文件的目录下，然后在终端或者iTerm 中输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">exec</span> WordPress bash</span><br></pre></td></tr></table></figure></p><p>这样你就可以进入到这个容器的包文件中，然后找到<code>wp-includes/http.php</code>文件，进入<code>vi http.php</code>修改。如果提示无法编辑。可能是因为没有安装vi。直接输入<code>apt-get install vim</code>来安装Vi。如果提示：Unable to locate package vim,则需要输入<code>apt-get update</code>, 等更新完毕以后再敲命令：<code>apt-get install vim</code>就OK啦~ 下面开始修改<code>http.php</code>这个文件。</p><h4 id="修改文件-记得提前备份一下要修改的文件"><a href="#修改文件-记得提前备份一下要修改的文件" class="headerlink" title="修改文件(记得提前备份一下要修改的文件)"></a>修改文件(记得提前备份一下要修改的文件)</h4><p>1、大概在533行（不同的WordPress版本可能行数不同，你可以查找关键词进行查找）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$same_host</span> = strtolower( <span class="variable">$parsed_home</span>[<span class="string">'host'</span>] ) === strtolower( <span class="variable">$parsed_url</span>[<span class="string">'host'</span>] );</span><br><span class="line">/*修改为*/</span><br><span class="line"><span class="variable">$same_host</span> = (  strtolower( <span class="variable">$parsed_home</span>[<span class="string">'host'</span>] ) === strtolower( <span class="variable">$parsed_url</span>[<span class="string">'host'</span>] ) || <span class="string">'localhost'</span> == strtolower(<span class="variable">$parsed_url</span>[<span class="string">'host'</span>]));</span><br></pre></td></tr></table></figure></p><p>2、在http.php文件的549行（不同的WordPress版本可能行数不同，你可以查找关键词进行查找）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( 127 === <span class="variable">$parts</span>[0] || 10 === <span class="variable">$parts</span>[0] || 0 === <span class="variable">$parts</span>[0]</span><br><span class="line">/*修改为：*/</span><br><span class="line"><span class="keyword">if</span> ( 127 === <span class="variable">$parts</span>[0] || 10 === <span class="variable">$parts</span>[0] || 0 === <span class="variable">$parts</span>[0] || 0 === <span class="variable">$parts</span>[0]</span><br></pre></td></tr></table></figure></p><h4 id="去验证"><a href="#去验证" class="headerlink" title="去验证"></a>去验证</h4><p>修改完以上内容，然后再到阿里云盾控制台重新验证一下漏洞，就会发现漏洞已经不存在了。以为这样就解决了，但是第二天打开后台，这个漏洞又冒出来~ 气人！！</p><h4 id="第三处修改"><a href="#第三处修改" class="headerlink" title="第三处修改"></a>第三处修改</h4><p>各种找了各种尝试后，发现还有一个地方要修改，还是http.php文件的540行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">preg_match(<span class="string">'#^(([1-9]?\d|1\d\d|25[0-5]|2[0-4]\d)\.)&#123;3&#125;([1-9]?\d|1\d\d|25[0-5]|2[0-4]\d)$#'</span>, <span class="variable">$host</span>)</span><br><span class="line">/*修改为：*/</span><br><span class="line">preg_match(<span class="string">'#^(([1-9]?\d|1\d\d|25[0-5]|2[0-4]\d|0+\d+)\.)&#123;3&#125;([1-9]?\d|1\d\d|25[0-5]|2[0-4]\d)$#'</span>, <span class="variable">$host</span>)</span><br></pre></td></tr></table></figure></p><p>好像是为了既增加对0开头的012.10.10.10这样的IP进行验证！修改完，然后再到阿里云盾控制台重新验证一下漏洞，就会发现漏洞已经不存在了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实我的个人博客站<a href="http://www.jackchen.cn/blog" target="_blank" rel="noopener">设计创意1984</a>也是wordpress架构的，wordpress大大简化了个人建站甚至企业建站的上限要求。对于很多设计师和前端来说都可以尝试的去学习下wordpress建站的方法。可以快速有效的搭建出各种类型的网站。确实不错！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.jackchen.cn/pic-5.jpg&quot; alt=&quot;修复wordpress IP验证不当&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;嗯，真的好久没有更新了。上一篇文章居然还是2017年的，时间过的真快！最近在阿里云香港服务器上用Docker架设了一个wordpress网站。然后各种折腾好了之后发现阿里云后台总是显示一个漏洞。然后还是高危级别的~强迫症受不了老是看到那个小红标。决定盘它~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;p&gt;首先阿里云的后台显示的漏洞名称为&lt;code&gt;wordpress IP验证不当漏洞&lt;/code&gt;，听起来是WordPress的一个版本Bug。然后点看具体的看了说明里给出的详细说明如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;wordpress /wp-includes/http.php文件中的wp_http_validate_url函数对输入IP验证不当，导致黑客可构造类似于012.10.10.10这样的畸形IP绕过验证，进行SSRF。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="wordpress" scheme="https://jackchensky.github.io/categories/wordpress/"/>
    
    
      <category term="wordpress" scheme="https://jackchensky.github.io/tags/wordpress/"/>
    
      <category term="阿里云" scheme="https://jackchensky.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>关于Hexo换电脑后的恢复和配置问题</title>
    <link href="https://jackchensky.github.io/2017/03/28/move-hexo-way/"/>
    <id>https://jackchensky.github.io/2017/03/28/move-hexo-way/</id>
    <published>2017-03-28T01:01:20.000Z</published>
    <updated>2021-10-03T07:50:35.083Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.jackchen.cn/image/jpg/move-hexo-way.jpg" alt="关于Hexo换电脑后的恢复和配置问题"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>用了八年的MacBookPro突然当机无法启动了，自己拆了修了两天也没有能够救活，只能换买了新电脑。新电脑收到后各种安装和环境配置真心累。还有恢复Hexo的工作想起来似乎很easy，但是做起来却遇到了各种大小坑。今天记录一下，留着给需要的小伙伴们。</p></blockquote><a id="more"></a><h2 id="安装需要的开发环境"><a href="#安装需要的开发环境" class="headerlink" title="安装需要的开发环境"></a>安装需要的开发环境</h2><h4 id="XCode"><a href="#XCode" class="headerlink" title="XCode"></a>XCode</h4><p>这个东东安装以前安装很费劲的，因为有好几个G，所以下载等待通常是很漫长的，不过现在可以在终端中直接用命令行来安装了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><h4 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h4><p><code>Homebrew</code> 是一个软件包管理系统。Mac OS X是基于Unix的操作系统，可以安装大部分为Unix/Linux开发的软件。然而，如果只是以使用为目的，对每个软件都进行手工编译不是很方便，也不利于管理已安装的软件，于是出现了类似于Linux中APT、Yum等类似的软件包管理系统，其中最著名的有MacPorts、Fink、Homebrew等。</p><p>还是在命令行工具中拷贝粘贴以下代码，而后按回车键<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure></p><p>随后再次在命令行工具中拷贝粘贴以下代码，而后按回车键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;export PATH=&quot;/usr/local/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure><h4 id="安装-Git-工具"><a href="#安装-Git-工具" class="headerlink" title="安装 Git 工具"></a>安装 Git 工具</h4><p><code>Git</code> 是一个版本控制工具，它有点像时间机器，可以让你回到从前。使用 <code>Git</code> 管理你的项目，对项目做出修改以后，提交一下，写一条信息，说明一下为啥做出这样的修改。在未来你可以恢复到之前提交的那个点上。不管你是设计师还是开发者，都应该学会使用 <code>Git</code>。后面我会教大家用 <code>Git</code> 工具来备份自己的 <code>Hexo</code> 到 <code>GitHub</code> 中。</p><p>还是在命令行工具中拷贝粘贴以下代码，而后按回车键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure><h4 id="安装-rvm-与-Ruby-2-3-1"><a href="#安装-rvm-与-Ruby-2-3-1" class="headerlink" title="安装 rvm 与 Ruby 2.3.1"></a>安装 rvm 与 Ruby 2.3.1</h4><p>分别输入下面三行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\curl -sSL https://get.rvm.io | bash -s stable</span><br><span class="line">rvm install 2.3.1</span><br><span class="line">rvm use 2.3.1</span><br></pre></td></tr></table></figure></p><p><code>rvm</code> 是 <code>Ruby</code> 的版本管理工具，其作用是在系统中安装若干个不同版本的 <code>Ruby</code>，且不让它们之间发生冲突。你可以安装很多个版本的 <code>Ruby</code>，比如，刚刚安装了 <code>2.3.1</code>，随后你还可以安装 <code>1.9.2</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm install 1.9.2</span><br></pre></td></tr></table></figure><p>当你需要使用 <code>1.9.2</code> 版本的 <code>Ruby</code> 的时候，就可以用下面命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm use 1.9.2</span><br></pre></td></tr></table></figure><p>当然你也可以随时切换回之前的版本，如果想要卸载哪个版本的 <code>Ruby</code>，你可以用下面命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm uninstall 1.9.2</span><br></pre></td></tr></table></figure></p><h4 id="安装-nvm-和-node"><a href="#安装-nvm-和-node" class="headerlink" title="安装 nvm 和 node"></a>安装 nvm 和 node</h4><blockquote><p>这边要重点说一下，因为在这里遇到过一个坑，耗了不少时间，因为网上有各种安装方法。一些已经不太官方，所以在安装后调试Hexo环境总是出现各种错误。最后搞得电脑里面乱乱的，最后强迫症的作用下，找了方法彻底清理后重新安装。</p></blockquote><h6 id="思路如下："><a href="#思路如下：" class="headerlink" title="思路如下："></a>思路如下：</h6><ul><li>用brew来安装nvm，并管理nvm的升级</li><li>用nvm来安装node.js，并管理node.js的升级</li></ul><p>卸载掉老版本的 Node 和 nvm</p><h6 id="卸载Node"><a href="#卸载Node" class="headerlink" title="卸载Node"></a>卸载Node</h6><ul><li>如果是从brew安装的, 运行brew uninstall node</li><li>删除~/目录下所有node和node_modules</li><li>删除/usr/local/lib中的所有node和node_modules</li><li>删除/usr/local/lib中的所有node和node_modules的文件夹</li><li>在/usr/local/bin中, 删除所有node的可执行文件(node和npm)</li></ul><h6 id="命令行整理后如下："><a href="#命令行整理后如下：" class="headerlink" title="命令行整理后如下："></a>命令行整理后如下：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf ~/.npm</span><br><span class="line">sudo rm -rf ~/node_modules</span><br><span class="line">sudo rm -rf ~/.node-gyp</span><br><span class="line">sudo rm /usr/local/bin/node</span><br><span class="line">sudo rm /usr/local/bin/npm</span><br><span class="line">sudo rm /usr/local/lib/dtrace/node.d</span><br></pre></td></tr></table></figure><p>扩展参考：<a href="https://www.zhihu.com/question/27389115/answer/36434788" target="_blank" rel="noopener"><em>如何删除node.js</em></a></p><h6 id="卸载-nvm"><a href="#卸载-nvm" class="headerlink" title="卸载.nvm"></a>卸载.nvm</h6><p>手动安装的nvm，删除下面这三个就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/.nvm</span><br><span class="line">rm -rf ~/.npm</span><br><span class="line">rm -rf ~/.bower</span><br></pre></td></tr></table></figure></p><p>还需要删除这个文件中的一段配置 <code>.bash_profile</code> (用brew安装后还需要重新加上的哦)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vim .bash_profile</span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</span><br></pre></td></tr></table></figure><p>扩展参考：<a href="https://github.com/creationix/nvm/issues/298" target="_blank" rel="noopener"><em>How to uninstall nvm? #298</em></a></p><h6 id="确认是否清理干净"><a href="#确认是否清理干净" class="headerlink" title="确认是否清理干净"></a>确认是否清理干净</h6><p>重启终端后，分别输入下面几个命令应该都是找不到，才算是正确的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm</span><br><span class="line">node</span><br><span class="line">npm</span><br></pre></td></tr></table></figure></p><h6 id="重新安装"><a href="#重新安装" class="headerlink" title="重新安装"></a>重新安装</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 使用brew安装nvm</span><br><span class="line">brew install nvm</span><br><span class="line"># vim .bash_profile后增加下面这两行</span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">source $(brew --prefix nvm)/nvm.sh</span><br><span class="line"># 使用nvm安装node.js</span><br><span class="line">nvm install node</span><br><span class="line"># 校验</span><br><span class="line">$ nvm --version</span><br><span class="line">0.31.0</span><br><span class="line">$ node -v</span><br><span class="line">v5.7.1</span><br><span class="line">$ npm -v</span><br><span class="line">3.6.0</span><br><span class="line">$ nvm list</span><br><span class="line">-&gt;       v5.7.1</span><br><span class="line">default -&gt; node (-&gt; v5.7.1)</span><br><span class="line">node -&gt; stable (-&gt; v5.7.1) (default)</span><br><span class="line">stable -&gt; 5.7 (-&gt; v5.7.1) (default)</span><br><span class="line">iojs -&gt; N/A (default)</span><br></pre></td></tr></table></figure><p>这样就完成了 <code>node</code> 和 <code>nvm</code> 的安装</p><h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><p>Hexo 是基于 Node.js 的第三方模块，所以我们需要对其进行单独安装。Mac 用户打开 Terminal，输入下面代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo</span><br></pre></td></tr></table></figure></p><p>（注：NPM的全称是Node Package Manager，是一个Node.js包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。）</p><h4 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h4><p>在你想要创建的磁盘目录下创建文件夹，比如我之前在 <code>github</code> 同步的文件夹是 <code>jackchensky.github.io</code>,你也可以自己新建个(不要用中文)，然后在终端下输入下面命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Public/jackchensky.github.io  /** 到你的Public文件夹里，jackchensky.github.io目录下 **/</span><br><span class="line">hexo init   /** 创建一个Hexo新框架 **/</span><br></pre></td></tr></table></figure></p><p>这个时候你会发现 <code>Hexo</code> 文件夹下出现了一些文件和文件夹</p><p>继续输入下面代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install /** 安装相应的 node modules （node 模块）**/</span><br><span class="line">hexo g /** 生成一套静态网页，功能和 hexo generate 相似 **/</span><br><span class="line">hexo server /** 在本地建立 Server ，提供访问和浏览 **/</span><br></pre></td></tr></table></figure></p><p>输入完毕后，会提示你使用浏览器进入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p>这样你就在本地创建好了一个<code>Hexo</code>博客，如果你是新建的博客，可以看我之前的教程，看看如何写文章和生成文章等 <a href="http://localhost:4000/2016/09/12/build-hexo-on-github/" target="_blank" rel="noopener"><em> 在GitHub上架设Hexo静态站</em></a><br>如果你是迁移博客的继续往下看</p><h4 id="将原来的文件拷贝到新电脑中"><a href="#将原来的文件拷贝到新电脑中" class="headerlink" title="将原来的文件拷贝到新电脑中"></a>将原来的文件拷贝到新电脑中</h4><p>这里要注意哪些文件是必须的，哪些文件是可以删除的~</p><ul><li>讨论下哪些文件是必须拷贝的：首先是之前自己修改的文件，像站点配置_config.yml，theme文件夹里面的主题，以及source里面自己写的博客文件，这些肯定要拷贝的。除此之外，还有三个文件需要有，就是scaffolds文件夹（文章的模板）、package.json（说明使用哪些包）和.gitignore（限定在提交的时候哪些文件可以忽略）。其实，这三个文件不是我们修改的，所以即使丢失了，也没有关系，我们可以建立一个新的文件夹，然后在里面执行hexo init，就会生成这三个文件，我们只需要将它们拷贝过来使用即可。总结：<code>_config.yml，theme/，source/，scaffolds/，package.json，.gitignore</code>，是需要拷贝的。</li><li>再讨论下哪些文件是不必拷贝的，或者说可以删除的：首先是.git文件，无论是在站点根目录下，还是主题目录下的.git文件，都可以删掉。然后是文件夹node_modules（在用npm install会重新生成），public（这个在用hexo g时会重新生成），.deploy_git文件夹（在使用hexo d时也会重新生成），db.json文件。其实上面这些文件也就是是.gitignore文件里面记载的可以忽略的内容。总结：<code>.git/，node_modules/，public/，.deploy_git/，db.json</code> 文件需要删除。</li><li>在git bash中切换目录到新拷贝的文件夹里，使用 <code>npm install</code> 命令，进行模块安装。很明显我们这里没用<code>hexo init</code>初始化，因为有的文件我们已经拷贝生成过来了，所以不必用<code>hexo init</code>去整体初始化，如果不慎在此时用了<code>hexo init</code>，则站点的配置文件 <code>_config.yml</code> 里面内容会被清空使用默认值，所以这一步一定要慎重，不要用<code>hexo init</code>。<blockquote><p>插件安装后，有的需要对配置文件_config.yml进行配置，具体怎么配置，可以参考上面插件在github主页上的具体说明</p></blockquote></li></ul><p>最后使用<code>hexo g</code>，然后使用<code>hexo d</code>进行部署，如果都没有出错，就转移成功了！</p><h4 id="在Github上创建新仓库做备份"><a href="#在Github上创建新仓库做备份" class="headerlink" title="在Github上创建新仓库做备份"></a>在Github上创建新仓库做备份</h4><h4 id="本地项目Git监管"><a href="#本地项目Git监管" class="headerlink" title="本地项目Git监管"></a>本地项目Git监管</h4><p>去你电脑的<code>Hexo</code>目录，比如我在<code>Public</code>中创建的 jackchensky.github.io 目录，想要让 Git 去监管这个项目目录，需要先去初始化一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></p><p>现在， 就成功的创建了一个 repository（仓库），下面去查看一下它的状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></p><p>提示我们现在正处在 master（主） 这个 branch（分支）上，然后有一堆还没有跟踪的文件，想让 Git 跟踪这些文件，需要把它添加到 Staging（工作） 区域，然后再去 commit（提交）一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &apos;第一次提交&apos;</span><br></pre></td></tr></table></figure></p><p>返回信息将看到我们提交的相关信息</p><p>确认一下我们的工作，可以使用 <code>log</code>命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure></p><p>再查看一下状态会发现返回信息会告诉我们，木有啥可以提交的 …</p><h4 id="在Github上创建一个新的远程仓库"><a href="#在Github上创建一个新的远程仓库" class="headerlink" title="在Github上创建一个新的远程仓库"></a>在Github上创建一个新的远程仓库</h4><p>使用 <code>github</code> 提供的服务，我们可以把项目文件推送到 <code>github</code> 提供的远程仓库里面，这样，你就不用担心意外删除掉在本地电脑上的项目文件了，因为你在远程的仓库里面，还有一个备份。你可以先去注册一个 <a href="https://github.com" target="_blank" rel="noopener"><em>github</em></a> 帐号，登录以后，去创建一个远程仓库：</p><ul><li>点击页面右上角的 + 号，Repository name 这里，输入仓库的名称</li><li>Description 是可以选填的描述信息</li><li>Public 公开或 Private 私密，如果你不想让别人看到你的项目的代码，应该选择 Private</li><li>点击 Create repository</li></ul><p>创建完成以后，<code>github</code> 会给你提示，你可以在本地去创建一个新的仓库，也可以把本地上已有的仓库推送到创建的这个 <code>github</code> 的远程仓库里面。下面，我们把之前本地创建的<code>jackchensky.github.io</code>项目推送到刚刚在 <code>github</code> 上新建的 <code>backup-blog</code> 项目中去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/jackchensky/backup-blog.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></p><p>上面这两行命令是，先去为项目添加一个远程的仓库，告诉 <code>git</code> 这个远程仓库的地址是啥，这个仓库是由 <code>github</code> 提供的，然后使用 <code>git push</code> ，去把 <code>master</code> 这个分支推送到这个远程的仓库里面。</p><p>可能这会提示你输入你在 github 上的用户名还有密码~</p><p>完成以后，你可以打开在 <code>github</code> 上的你的项目，你会发现项目里的文件已经显示出来了。在本地上，你可以继续使用 <code>git</code> 去提交修改，创建分支，然后想要把修改的东西推送到 <code>github</code> 上，可以使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></p><p>如果<code>git</code>提示这个 <code>fatal: remote origin already exists</code>是因为你可能之前有添加过远程<code>git</code>库，先删除掉远程库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure><p>然后用上面的方法重新添加就可以了</p><p>OK 👌 .. 这样你就不用害怕你的<code>Hexo</code>博客文件哪天突然丢失啦~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.jackchen.cn/image/jpg/move-hexo-way.jpg&quot; alt=&quot;关于Hexo换电脑后的恢复和配置问题&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;用了八年的MacBookPro突然当机无法启动了，自己拆了修了两天也没有能够救活，只能换买了新电脑。新电脑收到后各种安装和环境配置真心累。还有恢复Hexo的工作想起来似乎很easy，但是做起来却遇到了各种大小坑。今天记录一下，留着给需要的小伙伴们。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://jackchensky.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://jackchensky.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>关于Mac OS X中Terminal终端如何恢复默认</title>
    <link href="https://jackchensky.github.io/2017/03/27/reset-terminal/"/>
    <id>https://jackchensky.github.io/2017/03/27/reset-terminal/</id>
    <published>2017-03-27T09:45:15.000Z</published>
    <updated>2021-10-03T07:50:35.083Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.jackchen.cn/image/jpg/reset_terminal.jpeg" alt="如何恢复Terminal默认样式"></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>因为换了电脑，所以最近一直在完善各种软件和内核的配置。基本这几天都在填坑中度过。以前各种配置都很随意的设置，现在要自己一个个的重新恢复成老样子就不容易了。这也是一种工作流程上的坏习惯！因为Hexo也要重新部署到新电脑，配置部署填了一整天都没有搞定。还莫名其妙的把系统终端<code>Terminal</code>弄成了个奇怪的样式，而且在界面设置里怎么都恢复不过来。如下图的样子~<br><a id="more"></a><br><img src="https://img.jackchen.cn/image/jpg/reset_terminal_02.jpeg" alt="乱掉的样式"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>网上找了好一阵子各种修改，大多数都没有能够解决。最后找到了几篇文章可以完美解决，具体方法总结如下</p><p>在终端<code>Terminal</code>中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PS1</span><br></pre></td></tr></table></figure><p>这时会显示类似\h:\W \u\$这样的一段信息，这些信息就是用来定义提示符的显示方式，具体的细节下边会列出。</p><p>继续在<code>Terminal</code>里输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd~</span><br><span class="line">open -e .bash_profile</span><br></pre></td></tr></table></figure><p>这个时候会打开<code>TextEdit</code>，按照你的样式要求，可以在最后加上下面这句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PS1=&quot;\u \w$&quot;</span><br></pre></td></tr></table></figure><p>或者是<code>Ubuntu</code>的那种风格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PS1=&quot;\u@\h:\w $&quot;</span><br></pre></td></tr></table></figure><p>然后保存退出。</p><p>如果没有<code>.bash_profile</code>文件的话就新创建一个，在终端中输入如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd~</span><br><span class="line">touch .bash_profile</span><br></pre></td></tr></table></figure><p>然后重启后就发现<code>Terminal</code>终端可以恢复默认的样式啦….</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p><a href="https://www.zhihu.com/question/29650903" target="_blank" rel="noopener">https://www.zhihu.com/question/29650903</a><br><a href="http://equation85.github.io/blog/customize-terminal-on-mac/" target="_blank" rel="noopener">http://equation85.github.io/blog/customize-terminal-on-mac/</a><br><a href="http://osxdaily.com/2006/12/11/how-to-customize-your-terminal-prompt/" target="_blank" rel="noopener">http://osxdaily.com/2006/12/11/how-to-customize-your-terminal-prompt/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.jackchen.cn/image/jpg/reset_terminal.jpeg&quot; alt=&quot;如何恢复Terminal默认样式&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;p&gt;因为换了电脑，所以最近一直在完善各种软件和内核的配置。基本这几天都在填坑中度过。以前各种配置都很随意的设置，现在要自己一个个的重新恢复成老样子就不容易了。这也是一种工作流程上的坏习惯！因为Hexo也要重新部署到新电脑，配置部署填了一整天都没有搞定。还莫名其妙的把系统终端&lt;code&gt;Terminal&lt;/code&gt;弄成了个奇怪的样式，而且在界面设置里怎么都恢复不过来。如下图的样子~&lt;br&gt;
    
    </summary>
    
      <category term="MAC" scheme="https://jackchensky.github.io/categories/MAC/"/>
    
    
      <category term="MAC" scheme="https://jackchensky.github.io/tags/MAC/"/>
    
  </entry>
  
  <entry>
    <title>Java初步体验及问题小结</title>
    <link href="https://jackchensky.github.io/2017/02/28/Java-first-stage/"/>
    <id>https://jackchensky.github.io/2017/02/28/Java-first-stage/</id>
    <published>2017-02-28T15:23:23.000Z</published>
    <updated>2021-10-03T07:50:35.082Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.jackchen.cn/java-first-stage.jpg" alt="Hexo本地生成后的错误"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>从去年架设这个网站之后不久便开始了Java的学习。可以说学的挺艰辛的~ 大多数时间感觉上都是在程序的逻辑里迷失方向！当然，也有突然豁然开朗的时候（比较少）~ 但是不管怎么说还是坚持了下来。其实想想也不难，只是你练习和经历的时间还没有足够多。</p></blockquote><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>开始觉得时间再也不够用了，因为要一边权衡工作和家庭，一边整合碎片时间来看和练习！在没有任何后端语言基础的状态下，花了大把时间啃掉了大部头《Head First Java》。同时在慕课网上跟着Java工程师的路径学完了第一、二、三季。大多都是语法和模块化的概念和方法论。今天记录下前两天敲完理解完的小程序，分享给和我一样的小白同学们。<br><a id="more"></a></p><h2 id="第一个案例-——-随机生成10条不重复长度为10以内的字符串，进行排序"><a href="#第一个案例-——-随机生成10条不重复长度为10以内的字符串，进行排序" class="headerlink" title="第一个案例 —— 随机生成10条不重复长度为10以内的字符串，进行排序"></a>第一个案例 —— 随机生成10条不重复长度为10以内的字符串，进行排序</h2><p>设计要求：</p><blockquote><ul><li>创建完List<string>之后，往里添加10条数据</string></li><li>每条字符串的长度为10以内的随机整数</li><li>每条的字符串的字符为随机生成的字符，字符可重复</li><li>每条字符串不可重复</li></ul></blockquote><p>完整代码如下，如果问题欢迎大家指正 →</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;  </span><br><span class="line"><span class="keyword">import</span> java.util.Collections;  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line"><span class="keyword">import</span> java.util.Random;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomStringSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stringSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">stringList = randomString();</span><br><span class="line">System.out.println(<span class="string">"-------排序前-------"</span>);</span><br><span class="line"><span class="keyword">for</span>(String string:stringList) &#123;</span><br><span class="line">System.out.println(<span class="string">"字符串为："</span> + string);</span><br><span class="line">&#125;</span><br><span class="line">Collections.sort(stringList);</span><br><span class="line">System.out.println(<span class="string">"------排序后--------"</span>);</span><br><span class="line"><span class="keyword">for</span>(String string:stringList) &#123;</span><br><span class="line">System.out.println(<span class="string">"字符串为："</span> + string);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">randomString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; tempList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">String base = <span class="string">"abcdefghijklmnopqrstuvwxyz1234567890"</span>;</span><br><span class="line"><span class="comment">//添加十条随机字符串</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="comment">//长度为十以内的字符</span></span><br><span class="line"><span class="keyword">int</span> stringLength = random.nextInt(<span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;stringLength; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> number = random.nextInt(base.length());</span><br><span class="line">sb.append(base.charAt(number));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span>(tempList.contains(sb.toString()));</span><br><span class="line">tempList.add(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tempList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">RandomStringSort st = <span class="keyword">new</span> RandomStringSort();</span><br><span class="line">st.stringSort();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二个案例-——-简易的扑克牌比点数游戏"><a href="#第二个案例-——-简易的扑克牌比点数游戏" class="headerlink" title="第二个案例 —— 简易的扑克牌比点数游戏"></a>第二个案例 —— 简易的扑克牌比点数游戏</h2><p>设计要求：</p><blockquote><ul><li>创建一副扑克牌（没有大小王）</li><li>创建玩家（玩家有名字，手牌）</li><li>洗牌（打乱扑克牌的顺序）</li><li>发牌（每人发两张，一人一张来）</li><li>比牌（取手中最大点数的牌与另外一个玩家比较，点数大赢，如果点数相等，花色大赢）</li></ul></blockquote><p>完整代码如下，如果问题欢迎大家指正 →</p><p><code>People类</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建玩家对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Jackchen</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; cards;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.cards = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>CardsGame类</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 游戏主程序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Jackchen</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CardsGame</span> </span>&#123;</span><br><span class="line"><span class="comment">// 罗列出所有的牌面（除大小王）</span></span><br><span class="line">String[] datasList = &#123;</span><br><span class="line"><span class="string">"方块1"</span>,<span class="string">"方块2"</span>,<span class="string">"方块3"</span>,<span class="string">"方块4"</span>,<span class="string">"方块5"</span>,<span class="string">"方块6"</span>,<span class="string">"方块7"</span>,<span class="string">"方块8"</span>,<span class="string">"方块9"</span>,<span class="string">"方块10"</span>,<span class="string">"方块J"</span>,<span class="string">"方块Q"</span>,<span class="string">"方块K"</span>,</span><br><span class="line"><span class="string">"梅花1"</span>,<span class="string">"梅花2"</span>,<span class="string">"梅花3"</span>,<span class="string">"梅花4"</span>,<span class="string">"梅花5"</span>,<span class="string">"梅花6"</span>,<span class="string">"梅花7"</span>,<span class="string">"梅花8"</span>,<span class="string">"梅花9"</span>,<span class="string">"梅花10"</span>,<span class="string">"梅花J"</span>,<span class="string">"梅花Q"</span>,<span class="string">"梅花K"</span>,</span><br><span class="line"><span class="string">"红桃1"</span>,<span class="string">"红桃2"</span>,<span class="string">"红桃3"</span>,<span class="string">"红桃4"</span>,<span class="string">"红桃5"</span>,<span class="string">"红桃6"</span>,<span class="string">"红桃7"</span>,<span class="string">"红桃8"</span>,<span class="string">"红桃9"</span>,<span class="string">"红桃10"</span>,<span class="string">"红桃J"</span>,<span class="string">"红桃Q"</span>,<span class="string">"红桃K"</span>,</span><br><span class="line"><span class="string">"黑桃1"</span>,<span class="string">"黑桃2"</span>,<span class="string">"黑桃3"</span>,<span class="string">"黑桃4"</span>,<span class="string">"黑桃5"</span>,<span class="string">"黑桃6"</span>,<span class="string">"黑桃7"</span>,<span class="string">"黑桃8"</span>,<span class="string">"黑桃9"</span>,<span class="string">"黑桃10"</span>,<span class="string">"黑桃J"</span>,<span class="string">"黑桃Q"</span>,<span class="string">"黑桃K"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一副扑克牌</span></span><br><span class="line">List&lt;String&gt; cardsList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//花色</span></span><br><span class="line">String[] suitList = &#123;<span class="string">"方块"</span>,<span class="string">"梅花"</span>,<span class="string">"红桃"</span>,<span class="string">"黑桃"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//玩家列表</span></span><br><span class="line"><span class="keyword">static</span> List&lt;People&gt; playerList = <span class="keyword">new</span> ArrayList&lt;People&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一副扑克牌，并输出每张牌</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCards</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;datasList.length; i++) &#123;</span><br><span class="line">cardsList.add(datasList[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"创建扑克牌完成"</span>);</span><br><span class="line">System.out.println(<span class="string">"扑克牌中有："</span>);</span><br><span class="line"><span class="keyword">for</span>(String string:cardsList) &#123;</span><br><span class="line">System.out.print(string + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始洗牌，打乱顺序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shuffle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Collections.shuffle(cardsList);</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">"洗牌完成"</span>);</span><br><span class="line">System.out.println(<span class="string">"扑克牌里有："</span>);</span><br><span class="line"><span class="keyword">for</span>(String string:cardsList) &#123;</span><br><span class="line">System.out.print(string + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开始发牌，每人两张牌</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dealCards</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">"请输入两位玩家的名字："</span>);</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"请输入第"</span> + (i+<span class="number">1</span>) + <span class="string">"个玩家的名字"</span>);</span><br><span class="line">String name = scanner.next();</span><br><span class="line">People player = <span class="keyword">new</span> People(name);</span><br><span class="line">playerList.add(player);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"玩家分别是："</span>);</span><br><span class="line"><span class="keyword">for</span>(People people : playerList) &#123;</span><br><span class="line">System.out.println(people.name);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"-----------------------------"</span>);</span><br><span class="line"><span class="comment">//发牌</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</span><br><span class="line">String tempCard = cardsList.get(i);</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">playerList.get(<span class="number">0</span>).cards.add(tempCard);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">playerList.get(<span class="number">1</span>).cards.add(tempCard);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//亮牌</span></span><br><span class="line">System.out.println(<span class="string">"亮牌如下："</span>);</span><br><span class="line"><span class="keyword">for</span>(People people:playerList) &#123;</span><br><span class="line">System.out.println(<span class="string">"玩家："</span> + people.name + <span class="string">"玩家的手牌是："</span> + people.cards);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比牌面大小定胜负</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whoWin</span><span class="params">(List&lt;People&gt; playerList)</span> </span>&#123;</span><br><span class="line"><span class="comment">//玩家</span></span><br><span class="line">People player1 = playerList.get(<span class="number">0</span>);</span><br><span class="line">People player2 = playerList.get(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//玩家1的两张牌</span></span><br><span class="line">String card1ForPlayer1 = player1.cards.get(<span class="number">0</span>);</span><br><span class="line">String card2ForPlayer1 = player1.cards.get(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//玩家1最大的牌</span></span><br><span class="line">String bigCardForPlayer1 = getBigCard(card1ForPlayer1,card2ForPlayer1);</span><br><span class="line">System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">System.out.println(player1.name + <span class="string">"最大的牌是："</span> + bigCardForPlayer1);</span><br><span class="line"><span class="comment">//玩家2的两张牌</span></span><br><span class="line">String card1ForPlayer2 = player2.cards.get(<span class="number">0</span>);</span><br><span class="line">String card2ForPlayer2 = player2.cards.get(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//玩家2最大的牌</span></span><br><span class="line">String bigCardForPlayer2 = getBigCard(card1ForPlayer2,card2ForPlayer2);</span><br><span class="line">System.out.println(player2.name + <span class="string">"最大的牌是："</span> + bigCardForPlayer2);</span><br><span class="line">System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line"><span class="comment">//玩家中最大的牌为</span></span><br><span class="line">String bigCard = getBigCard(bigCardForPlayer1,bigCardForPlayer2);</span><br><span class="line"><span class="keyword">if</span>(bigCardForPlayer1.equals(bigCard)) &#123;</span><br><span class="line">System.out.println(<span class="string">"获胜的是："</span> + player1.name);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(bigCardForPlayer2.equals(bigCard)) &#123;</span><br><span class="line">System.out.println(<span class="string">"获胜的是："</span> + player2.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比较两张牌面的大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBigCard</span><span class="params">(String card1, String card2)</span> </span>&#123;</span><br><span class="line"><span class="comment">//最大的牌面</span></span><br><span class="line">String bigCard = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//取得每张牌的数字，因为牌面有10，所以从第二位往后截取字符串</span></span><br><span class="line">String num1 = card1.substring(<span class="number">2</span>);</span><br><span class="line">String num2 = card2.substring(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//取得每张牌的花色</span></span><br><span class="line">String suit1 = card1.substring(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">String suit2 = card2.substring(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//两张牌的花色大小</span></span><br><span class="line"><span class="keyword">int</span> level1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> level2 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//输出每张牌的数字和花色</span></span><br><span class="line"><span class="comment">//System.out.println("数字分别为：" + num1 + " " + num2);</span></span><br><span class="line"><span class="comment">//System.out.println("花色分别为" + suit1 + " " + suit2);</span></span><br><span class="line"><span class="keyword">if</span> (num1.compareTo(num2) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//System.out.println("第一张牌大");</span></span><br><span class="line">bigCard = card1;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(num1.compareTo(num2) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//System.out.println("两张牌一样大");</span></span><br><span class="line"><span class="comment">//数字相同，比较花色</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;suitList.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(suit1.equals(suitList[i])) &#123;</span><br><span class="line">      <span class="comment">//输出花色在数组下的下标，来决定哪个花色大</span></span><br><span class="line">      <span class="comment">//System.out.println(i);</span></span><br><span class="line">level1 = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(suit2.equals(suitList[i])) &#123;</span><br><span class="line">          <span class="comment">//输出花色在数组下的下标，来决定哪个花色大</span></span><br><span class="line">System.out.println(i);</span><br><span class="line">level2 = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(level1 &gt; level2) &#123;</span><br><span class="line">        <span class="comment">//System.out.println(card1);</span></span><br><span class="line">bigCard = card1;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//System.out.println(card2);</span></span><br><span class="line">bigCard = card2;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (num1.compareTo(num2) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//System.out.println("第二张牌大");</span></span><br><span class="line">bigCard = card2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bigCard;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">CardsGame st = <span class="keyword">new</span> CardsGame();</span><br><span class="line">st.createCards();</span><br><span class="line">st.shuffle();</span><br><span class="line">st.dealCards();</span><br><span class="line">st.whoWin(playerList);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="JAVA中字符串函数subString的用法小结"><a href="#JAVA中字符串函数subString的用法小结" class="headerlink" title="JAVA中字符串函数subString的用法小结"></a>JAVA中字符串函数subString的用法小结</h2><blockquote><p>在第二个案例中我们会用到<code>subString字符串函数</code>，在这里我们总结了一下</p></blockquote><p>str＝str.substring(int beginIndex);截取掉str从首字母起长度为beginIndex的字符串，将剩余字符串赋值给str；</p><p>str＝str.substring(int beginIndex，int endIndex);截取str中从beginIndex开始至endIndex结束时的字符串，并将其赋值给str;</p><p>Demo如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">  String s1 =<span class="string">"1234567890abcdefgh"</span>;</span><br><span class="line">  s1 = s1.substring(<span class="number">10</span>);</span><br><span class="line">  System.out.println(s1);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：abcdefgh</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">  String s1 =<span class="string">"1234567890abcdefgh"</span>;</span><br><span class="line">  s1 = s1.substring(<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">  System.out.println(s1);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：123456789</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>程序的学习还是要多练习，必须要保持每天都能敲到一定量级的代码才可以。还要自己找一些实用的小程序练习，一遍不行就再来一遍，要学会刻意练习。每次练习结束了要思考代码后面的逻辑。其实编程语言知识个工具，重要的是程序背后的逻辑。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.jackchen.cn/java-first-stage.jpg&quot; alt=&quot;Hexo本地生成后的错误&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;从去年架设这个网站之后不久便开始了Java的学习。可以说学的挺艰辛的~ 大多数时间感觉上都是在程序的逻辑里迷失方向！当然，也有突然豁然开朗的时候（比较少）~ 但是不管怎么说还是坚持了下来。其实想想也不难，只是你练习和经历的时间还没有足够多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h2&gt;&lt;p&gt;开始觉得时间再也不够用了，因为要一边权衡工作和家庭，一边整合碎片时间来看和练习！在没有任何后端语言基础的状态下，花了大把时间啃掉了大部头《Head First Java》。同时在慕课网上跟着Java工程师的路径学完了第一、二、三季。大多都是语法和模块化的概念和方法论。今天记录下前两天敲完理解完的小程序，分享给和我一样的小白同学们。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://jackchensky.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://jackchensky.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>解决Hexo本地生成后出现的错误问题</title>
    <link href="https://jackchensky.github.io/2016/09/22/hexo-error/"/>
    <id>https://jackchensky.github.io/2016/09/22/hexo-error/</id>
    <published>2016-09-22T09:07:25.000Z</published>
    <updated>2021-10-03T07:50:35.083Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.jackchen.cn/hexo-error-01.jpg" alt="Hexo本地生成后的错误"></p><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h2><p>在本地架设好Hexo后一切调试的都挺顺利的，唯一的问题就是每次在执行 <code>hexo -d</code> 等命令的时候总是会出现如下的一堆错误提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; [Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class="line">&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class="line">&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class="line">&#123; [Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class="line">&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class="line">&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br></pre></td></tr></table></figure></p><p>百度谷歌了几次都没能找到好的解决方案，包括 Hexo 官方对于这个错误的解决方法 执行→  <code>$ npm install hexo --no-optional</code> 也木有用！<br><a id="more"></a></p><h2 id="2-发现"><a href="#2-发现" class="headerlink" title="2.发现"></a>2.发现</h2><p>今天无意中发现了一个比较笨的解决方法。用一段代码彻底将 <code>Node</code> 删除干净了！然后重装一下就OK了哦！👌<br>棒棒哒，Let’s do it!</p><h2 id="3-解决"><a href="#3-解决" class="headerlink" title="3.解决"></a>3.解决</h2><p>创建一个 <code>shell</code> 文件，在终端或者 iTerm 中输入如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano  uninstall_node.sh</span><br></pre></td></tr></table></figure></p><p>然后输入下面一段代码后保存退出→<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">lsbom -f -l -s -pf /var/db/receipts/org.nodejs.pkg.bom \</span><br><span class="line">| while read i; do</span><br><span class="line">sudo rm /usr/local/$&#123;i&#125;</span><br><span class="line">done</span><br><span class="line">sudo rm -rf /usr/local/lib/node \</span><br><span class="line">/usr/local/lib/node_modules \</span><br><span class="line">/var/db/receipts/org.nodejs.*</span><br></pre></td></tr></table></figure></p><p>然后给文件赋权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod  777  uninstall_node.sh</span><br></pre></td></tr></table></figure></p><p>最后运行脚本,彻底清除node.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh  uninstall_node.sh</span><br></pre></td></tr></table></figure></p><p>现在可以重新安装node.js啦！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure></p><p>最后还要安装一下Hexo,执行如下命令就好，其他配置不需要改变！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>不管做什么事情问题总是会有的，解决不了不要早早放弃，也不要抓着不放，学会换个方法，换个思路和角度，或许问题就能瞬间消失哦 ！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.jackchen.cn/hexo-error-01.jpg&quot; alt=&quot;Hexo本地生成后的错误&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-问题&quot;&gt;&lt;a href=&quot;#1-问题&quot; class=&quot;headerlink&quot; title=&quot;1.问题&quot;&gt;&lt;/a&gt;1.问题&lt;/h2&gt;&lt;p&gt;在本地架设好Hexo后一切调试的都挺顺利的，唯一的问题就是每次在执行 &lt;code&gt;hexo -d&lt;/code&gt; 等命令的时候总是会出现如下的一堆错误提示&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; [Error: Cannot find module &amp;apos;./build/Release/DTraceProviderBindings&amp;apos;] code: &amp;apos;MODULE_NOT_FOUND&amp;apos; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; [Error: Cannot find module &amp;apos;./build/default/DTraceProviderBindings&amp;apos;] code: &amp;apos;MODULE_NOT_FOUND&amp;apos; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; [Error: Cannot find module &amp;apos;./build/Debug/DTraceProviderBindings&amp;apos;] code: &amp;apos;MODULE_NOT_FOUND&amp;apos; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; [Error: Cannot find module &amp;apos;./build/Release/DTraceProviderBindings&amp;apos;] code: &amp;apos;MODULE_NOT_FOUND&amp;apos; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; [Error: Cannot find module &amp;apos;./build/default/DTraceProviderBindings&amp;apos;] code: &amp;apos;MODULE_NOT_FOUND&amp;apos; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; [Error: Cannot find module &amp;apos;./build/Debug/DTraceProviderBindings&amp;apos;] code: &amp;apos;MODULE_NOT_FOUND&amp;apos; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;百度谷歌了几次都没能找到好的解决方案，包括 Hexo 官方对于这个错误的解决方法 执行→  &lt;code&gt;$ npm install hexo --no-optional&lt;/code&gt; 也木有用！&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://jackchensky.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://jackchensky.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>在GitHub上架设Hexo静态站</title>
    <link href="https://jackchensky.github.io/2016/09/12/build-hexo-on-github/"/>
    <id>https://jackchensky.github.io/2016/09/12/build-hexo-on-github/</id>
    <published>2016-09-12T15:11:14.000Z</published>
    <updated>2021-10-03T07:50:35.082Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.jackchen.cn/pic-02.jpg" alt="GitHub上架设Hexo"></p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>我想重新架设一个站来记录学习中遇到的事件，以便自己以后的回溯和总结。于是就有了这篇文章:D</p><h2 id="2-准备"><a href="#2-准备" class="headerlink" title="2.准备"></a>2.准备</h2><p>首先你得要有一个<a href="http://www.github.com" target="_blank" rel="noopener">GitHub</a>账号。直接去官网注册一下就好。整个网站架设好了就和我的这个站：<a href="http://jackchensky.github.io">jackchensky.github.io</a>，感觉是一样的。你可以自己先打开来瞅一眼！是不是感觉自己像个coding高手一样。</p><p>在下面的架设过程中你需要对下面几个工具熟悉起来。因为以后会一直使用</p><blockquote><ul><li>命令行工具的使用</li><li>Atom的使用</li><li>如何写出优雅的Markdown文档</li></ul></blockquote><p>OK，Let’s do it!<br><a id="more"></a></p><h2 id="3-前期架设"><a href="#3-前期架设" class="headerlink" title="3.前期架设"></a>3.前期架设</h2><h3 id="3-1-在GitHub上创建一个-Repo"><a href="#3-1-在GitHub上创建一个-Repo" class="headerlink" title="3.1.在GitHub上创建一个 Repo"></a>3.1.在GitHub上创建一个 Repo</h3><p>在游览器中登录<a href="http://www.github.com" target="_blank" rel="noopener">GitHub</a>，创建一个 Repo，名称格式为 <code>yourname.github.io</code>。比如我的个人GitHub账户用户名是<code>jackchensky</code>，所以，我的这个Repo名称就是 <code>jackchensky.github.io</code>。</p><h3 id="3-2-确认本地已经安装好-git-和-npm"><a href="#3-2-确认本地已经安装好-git-和-npm" class="headerlink" title="3.2.确认本地已经安装好 git 和 npm"></a>3.2.确认本地已经安装好 git 和 npm</h3><p>在终端或者iTerm里输入一下命令确认git与npm已经成功安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line">npm --version</span><br></pre></td></tr></table></figure></p><h3 id="3-3-安装-Hexo"><a href="#3-3-安装-Hexo" class="headerlink" title="3.3.安装 Hexo"></a>3.3.安装 Hexo</h3><p>在终端或者iTerm 中继续输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></p><h3 id="3-4-本地创建工作目录"><a href="#3-4-本地创建工作目录" class="headerlink" title="3.4.本地创建工作目录"></a>3.4.本地创建工作目录</h3><p>现在去你的GitHub把你的Repo的git地址拷贝出来</p><blockquote><ul><li>我的是 <a href="https://github.com/jackchensky/jackchensky.github.io.git" target="_blank" rel="noopener">https://github.com/jackchensky/jackchensky.github.io.git</a></li><li>你的是<a href="https://github.com/jackchensky/jackchensky.github.io.git" target="_blank" rel="noopener">https://github.com/yourname/yourname.github.io.git</a> (请把yourname换成你的GitHub用户名)。</li></ul></blockquote><p>然后在终端或iTerm中输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Public</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/yourname/yourname.github.io.git</span><br></pre></td></tr></table></figure></p><h3 id="3-5-让你本地网站初始化"><a href="#3-5-让你本地网站初始化" class="headerlink" title="3.5.让你本地网站初始化"></a>3.5.让你本地网站初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo init yourname.github.io</span><br><span class="line"><span class="built_in">cd</span> yourname.github.io</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>完成以上步骤之后，你可以打开游览器，在地址栏里输入： <code>localhost:4000</code>,看看初始默认网页的样子！</p><h3 id="3-6-现在部署到GitHub上去"><a href="#3-6-现在部署到GitHub上去" class="headerlink" title="3.6.现在部署到GitHub上去"></a>3.6.现在部署到GitHub上去</h3><p>在终端或者iTerm中进入到jackchensky.github.io目录下，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">atom .</span><br></pre></td></tr></table></figure></p><p>😝 …是不是看到Atom自动打开 <code>yourname.github.io</code>这个目录下了吧！是不是很神奇。在计算机字符术语中 <code>.</code> 代表“所有的”，所以，<code>atom .</code>就是说“用Atom 这个程序打开当前目录内的所有文件”… 现在将Atom的左侧面板中找到 <code>_config.yml</code>文件，搜索到 deploy ，改成如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: httPs://github.com/yourname/yourname.github.io.git</span><br></pre></td></tr></table></figure></p><p>PS: 记得要把<code>yourname</code>改成你的GitHub用户名！<br>现在就剩下最后一步了，在终端或者iTerm中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br><span class="line">open http://yourname.github.io</span><br></pre></td></tr></table></figure></p><h3 id="3-7-Hexo基本命令"><a href="#3-7-Hexo基本命令" class="headerlink" title="3.7.Hexo基本命令"></a>3.7.Hexo基本命令</h3><p>Hexo通常基本命令就四个，而且还可以使用组合命令。基本命令如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo g = hexo generate  <span class="comment">#生成</span></span><br><span class="line">hexo s = hexo server    <span class="comment">#启动本地预览</span></span><br><span class="line">hexo d = hexo deploy    <span class="comment">#远程部署</span></span><br><span class="line">---</span><br><span class="line">hexo n <span class="string">"文章标题"</span> = hexo new <span class="string">"文章标题"</span>    <span class="comment">#新建一篇文章</span></span><br></pre></td></tr></table></figure></p><p>通常为了提高效率，选择用组合命令，如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g   <span class="comment">#等同于输入 hexo g,再输入 hexo s</span></span><br><span class="line">hexo d -g   <span class="comment">#等同于输入 hexo g,再输入 hexo d</span></span><br></pre></td></tr></table></figure></p><h3 id="3-8-总结"><a href="#3-8-总结" class="headerlink" title="3.8.总结"></a>3.8.总结</h3><p>现在你可以自己来创建文章，并进行体验编辑带来的乐趣和优雅！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.jackchen.cn/pic-02.jpg&quot; alt=&quot;GitHub上架设Hexo&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h2&gt;&lt;p&gt;我想重新架设一个站来记录学习中遇到的事件，以便自己以后的回溯和总结。于是就有了这篇文章:D&lt;/p&gt;
&lt;h2 id=&quot;2-准备&quot;&gt;&lt;a href=&quot;#2-准备&quot; class=&quot;headerlink&quot; title=&quot;2.准备&quot;&gt;&lt;/a&gt;2.准备&lt;/h2&gt;&lt;p&gt;首先你得要有一个&lt;a href=&quot;http://www.github.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;账号。直接去官网注册一下就好。整个网站架设好了就和我的这个站：&lt;a href=&quot;http://jackchensky.github.io&quot;&gt;jackchensky.github.io&lt;/a&gt;，感觉是一样的。你可以自己先打开来瞅一眼！是不是感觉自己像个coding高手一样。&lt;/p&gt;
&lt;p&gt;在下面的架设过程中你需要对下面几个工具熟悉起来。因为以后会一直使用&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;命令行工具的使用&lt;/li&gt;
&lt;li&gt;Atom的使用&lt;/li&gt;
&lt;li&gt;如何写出优雅的Markdown文档&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;OK，Let’s do it!&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://jackchensky.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://jackchensky.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>写在开始之前</title>
    <link href="https://jackchensky.github.io/2016/09/12/write-before/"/>
    <id>https://jackchensky.github.io/2016/09/12/write-before/</id>
    <published>2016-09-12T07:19:01.000Z</published>
    <updated>2021-10-03T07:50:35.083Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.jackchen.cn/pic-01.jpg" alt="写在开始之前"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>三十来岁的人生想想过的也快。这些年，经历了不算大的起起伏伏，不敢说沧海人生，但起码也走过了一段人生旅程。于是想做些记录，也算是个总结和学习的过程。</p></blockquote><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>从上大学的时候就开始习惯写博客，当时用的是Alex哥哥自己改编的博客平台，之后从2006年开始转到wordpress平台。<a href="http://www.jackchen.cn/blog" target="_blank" rel="noopener"><em>设计创意1984</em></a>    就这样一直写了十多年。很长一段时间更新博客占据了我大多数的业余时间，但是我乐在其中！博客站的内容分类也相当之多，但因为自己平面和网页设计师的职位原因，素材文章占了大多数。只是为了方便自己和同职位的设计师们。在做设计一些年头后我一直想把一些优秀的素材单独Share给大家，更简单更轻盈的素材下载模式。于是我建了<a href="http://www.qingsucai.com" target="_blank" rel="noopener"><em>轻素材</em></a>    网站。<br><a id="more"></a></p><p>在安静了一段时间后，我决定要好好的学一门后端编程语言。因为我感觉编程在未来会是大多数人都需要掌握的一门技能，它在改变当下这个世界的同时也让未来充满不可预知。当然编程对我来说其实并不陌生。因为有过一段时间的前端设计师的职位经历，所以HTML+DIV+CSS这些还是可以应付的。包括一些简单的JS代码和Bootstrap框架都有一些了解。但是压力还是有的。看了很多文章，知道后端语言的学习其实不仅仅是学习一门语言，在学习的整个过程中，你还要了解很多，比如Git、服务器、数据库等等。但是我相信，<code>只要你真心想做一件事，全世界都会来帮你的！最怕的是你自己的提前放弃。难道不是吗？</code></p><h3 id="准备记录和分享"><a href="#准备记录和分享" class="headerlink" title="准备记录和分享"></a>准备记录和分享</h3><p>学习和健身一样需要的是一种持久的坚持，如果你能把学习健身融入到生活中，变成一种顺其自然的生活方式。那才是正真的大神。但是现实总是需要种种妥协的。你需要不断的平衡生活和学习！还有就是要有极高的自制力，好的程序员甚至黑客都是有着偏执的强迫症，对自己的生活学习都有着非常细密的管理。于是在开始之前，我决定做一个关于学习过程的记录站，最后就决定挂在GitHub上了。毕竟这里是全球最牛X程序员关注的地方。用了非常简约的HEXO博客系统，非常棒。</p><h3 id="状态和效率"><a href="#状态和效率" class="headerlink" title="状态和效率"></a>状态和效率</h3><p>我们都听过“人生来平等”这样的言论。其实不然！每个人出身后先天就注定了很多事情，智商的高低，是否有疾病等等。所以对于学习有的人是天生会排斥，而有的人却恰恰相反。就好像不同的发动机一样，如果把自己的状态和效率调整到一个最佳状态其实非常重要！好比我自己，一直渴望学习，但是一旦周遭环境不在理想中的那个状态就会拖延症发作！这个非常的不好。因为环境是相对的，会不停的变化，你在漫长的岁月里很难去平衡周遭的环境。很多要坚持学英语的人应该有过这种感觉。开始学习了一段时间，背了几页单词，然后间隔了一段时间。回去再学又要重头开始，这样的死循环就是很不好的。所以如何高效且保持状态是很重要的！而且要自己去发现，因为每个人都有差异。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>或许看到这里你根本没感到自己学到了什么，因为我没有总结出一套有依据的科学学习方法。但是我这样用笨方法记录下来，让自己有回溯反思的时候，我觉得这个就很值得！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.jackchen.cn/pic-01.jpg&quot; alt=&quot;写在开始之前&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;三十来岁的人生想想过的也快。这些年，经历了不算大的起起伏伏，不敢说沧海人生，但起码也走过了一段人生旅程。于是想做些记录，也算是个总结和学习的过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;动机&quot;&gt;&lt;a href=&quot;#动机&quot; class=&quot;headerlink&quot; title=&quot;动机&quot;&gt;&lt;/a&gt;动机&lt;/h3&gt;&lt;p&gt;从上大学的时候就开始习惯写博客，当时用的是Alex哥哥自己改编的博客平台，之后从2006年开始转到wordpress平台。&lt;a href=&quot;http://www.jackchen.cn/blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;em&gt;设计创意1984&lt;/em&gt;&lt;/a&gt;    就这样一直写了十多年。很长一段时间更新博客占据了我大多数的业余时间，但是我乐在其中！博客站的内容分类也相当之多，但因为自己平面和网页设计师的职位原因，素材文章占了大多数。只是为了方便自己和同职位的设计师们。在做设计一些年头后我一直想把一些优秀的素材单独Share给大家，更简单更轻盈的素材下载模式。于是我建了&lt;a href=&quot;http://www.qingsucai.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;em&gt;轻素材&lt;/em&gt;&lt;/a&gt;    网站。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://jackchensky.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="学习" scheme="https://jackchensky.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
